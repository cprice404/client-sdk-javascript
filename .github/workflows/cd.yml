name: CD

on:
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.release }}
    steps:
      - uses: actions/checkout@v2
      - name: Set release
        id: semrel
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allow-initial-development-versions: true
          force-bump-patch-version: true

      - name: Output release
        id: release
        run: echo "::set-output name=release::${{ steps.semrel.outputs.version }}"
  publish_javascript:
    # The type of runner that the job will run on
    runs-on: macos-latest
    needs: release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test

      - name: Publish package to npm
        run: |
          export VERSION="${{ needs.release.outputs.version }}"
          echo "Publishing package with version $VERSION"
          mv package.json package.json.ORIG
          cat package.json.ORIG|jq ". += {\"version\": \"$VERSION\"}" > package.json
          npm publish
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: Configure AWS credentials for public artifacts account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::537451838446:role/public-cicd-remote-deployer
          aws-region: us-west-2
          aws-access-key-id: ${{ secrets.PUBLIC_CICD_DEPLOYER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PUBLIC_CICD_DEPLOYER_SECRET_ACCESS_KEY }}
          role-duration-seconds: 1200
          role-session-name: javascript-sdk-lambda-layer-deployer

      - name: Publish lambda layer
        run: |
          export VERSION="${{ needs.release.outputs.version }}"
          echo "Publishing lambda layer with version $VERSION"
          mkdir -p nodejs/node_modules
          pushd nodejs/node_modules
            npm i @gomomento/sdk@${VERSION}
          popd
          zip -r layer.zip nodejs
          LAYER_NAME="momento-sdk-javascript"
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name ${LAYER_NAME} \
            --description "Lambda layer using Momento sdk version ${VERSION}" \
            --license-info "Apache License 2.0" \
            --zip-file layer.zip \
            --compatible-runtimes nodejs14.x nodejs12.x | jq '.Version')
          
          aws lambda add-layer-version-permission \
            --layer-name ${LAYER_NAME} \
            --version-number ${LAYER_VERSION} \
            --statement-id "Allow all aws accounts access to momento-sdk-javascript lambda layer, version: ${VERSION}" \
            --principal * \
            --action lambda:GetLayerVersion
        shell: bash
