/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.18.1
 * source: cacheclient.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cache_client {
    export enum ECacheResult {
        Invalid = 0,
        Ok = 1,
        Hit = 2,
        Miss = 3
    }
    export class _GetRequest extends pb_1.Message {
        constructor(data?: any[] | {
            cache_key?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_key" in data && data.cache_key != undefined) {
                    this.cache_key = data.cache_key;
                }
            }
        }
        get cache_key() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set cache_key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            cache_key?: Uint8Array;
        }) {
            const message = new _GetRequest({});
            if (data.cache_key != null) {
                message.cache_key = data.cache_key;
            }
            return message;
        }
        toObject() {
            const data: {
                cache_key?: Uint8Array;
            } = {};
            if (this.cache_key != null) {
                data.cache_key = this.cache_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_key !== undefined)
                writer.writeBytes(1, this.cache_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _GetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _GetRequest {
            return _GetRequest.deserialize(bytes);
        }
    }
    export class _GetResponse extends pb_1.Message {
        constructor(data?: any[] | {
            result?: ECacheResult;
            cache_body?: Uint8Array;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("cache_body" in data && data.cache_body != undefined) {
                    this.cache_body = data.cache_body;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get result() {
            return pb_1.Message.getField(this, 1) as ECacheResult;
        }
        set result(value: ECacheResult) {
            pb_1.Message.setField(this, 1, value);
        }
        get cache_body() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set cache_body(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            result?: ECacheResult;
            cache_body?: Uint8Array;
            message?: string;
        }) {
            const message = new _GetResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.cache_body != null) {
                message.cache_body = data.cache_body;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: ECacheResult;
                cache_body?: Uint8Array;
                message?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.cache_body != null) {
                data.cache_body = this.cache_body;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result !== undefined)
                writer.writeEnum(1, this.result);
            if (this.cache_body !== undefined)
                writer.writeBytes(2, this.cache_body);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _GetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readEnum();
                        break;
                    case 2:
                        message.cache_body = reader.readBytes();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _GetResponse {
            return _GetResponse.deserialize(bytes);
        }
    }
    export class _DeleteRequest extends pb_1.Message {
        constructor(data?: any[] | {
            cache_key?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_key" in data && data.cache_key != undefined) {
                    this.cache_key = data.cache_key;
                }
            }
        }
        get cache_key() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set cache_key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            cache_key?: Uint8Array;
        }) {
            const message = new _DeleteRequest({});
            if (data.cache_key != null) {
                message.cache_key = data.cache_key;
            }
            return message;
        }
        toObject() {
            const data: {
                cache_key?: Uint8Array;
            } = {};
            if (this.cache_key != null) {
                data.cache_key = this.cache_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_key !== undefined)
                writer.writeBytes(1, this.cache_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _DeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _DeleteRequest {
            return _DeleteRequest.deserialize(bytes);
        }
    }
    export class _DeleteResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new _DeleteResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _DeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _DeleteResponse {
            return _DeleteResponse.deserialize(bytes);
        }
    }
    export class _SetRequest extends pb_1.Message {
        constructor(data?: any[] | {
            cache_key?: Uint8Array;
            cache_body?: Uint8Array;
            ttl_milliseconds?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_key" in data && data.cache_key != undefined) {
                    this.cache_key = data.cache_key;
                }
                if ("cache_body" in data && data.cache_body != undefined) {
                    this.cache_body = data.cache_body;
                }
                if ("ttl_milliseconds" in data && data.ttl_milliseconds != undefined) {
                    this.ttl_milliseconds = data.ttl_milliseconds;
                }
            }
        }
        get cache_key() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set cache_key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get cache_body() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set cache_body(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get ttl_milliseconds() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set ttl_milliseconds(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            cache_key?: Uint8Array;
            cache_body?: Uint8Array;
            ttl_milliseconds?: number;
        }) {
            const message = new _SetRequest({});
            if (data.cache_key != null) {
                message.cache_key = data.cache_key;
            }
            if (data.cache_body != null) {
                message.cache_body = data.cache_body;
            }
            if (data.ttl_milliseconds != null) {
                message.ttl_milliseconds = data.ttl_milliseconds;
            }
            return message;
        }
        toObject() {
            const data: {
                cache_key?: Uint8Array;
                cache_body?: Uint8Array;
                ttl_milliseconds?: number;
            } = {};
            if (this.cache_key != null) {
                data.cache_key = this.cache_key;
            }
            if (this.cache_body != null) {
                data.cache_body = this.cache_body;
            }
            if (this.ttl_milliseconds != null) {
                data.ttl_milliseconds = this.ttl_milliseconds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_key !== undefined)
                writer.writeBytes(1, this.cache_key);
            if (this.cache_body !== undefined)
                writer.writeBytes(2, this.cache_body);
            if (this.ttl_milliseconds !== undefined)
                writer.writeUint64(3, this.ttl_milliseconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_key = reader.readBytes();
                        break;
                    case 2:
                        message.cache_body = reader.readBytes();
                        break;
                    case 3:
                        message.ttl_milliseconds = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _SetRequest {
            return _SetRequest.deserialize(bytes);
        }
    }
    export class _SetResponse extends pb_1.Message {
        constructor(data?: any[] | {
            result?: ECacheResult;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get result() {
            return pb_1.Message.getField(this, 1) as ECacheResult;
        }
        set result(value: ECacheResult) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            result?: ECacheResult;
            message?: string;
        }) {
            const message = new _SetResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: ECacheResult;
                message?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result !== undefined)
                writer.writeEnum(1, this.result);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readEnum();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _SetResponse {
            return _SetResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedScsService {
        static definition = {
            Get: {
                path: "/cache_client.Scs/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _GetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _GetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _GetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _GetResponse.deserialize(new Uint8Array(bytes))
            },
            Set: {
                path: "/cache_client.Scs/Set",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _SetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _SetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _SetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _SetResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/cache_client.Scs/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _DeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _DeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _DeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _DeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Get(call: grpc_1.ServerUnaryCall<_GetRequest, _GetResponse>, callback: grpc_1.requestCallback<_GetResponse>): void;
        abstract Set(call: grpc_1.ServerUnaryCall<_SetRequest, _SetResponse>, callback: grpc_1.requestCallback<_SetResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<_DeleteRequest, _DeleteResponse>, callback: grpc_1.requestCallback<_DeleteResponse>): void;
    }
    export class ScsClient extends grpc_1.makeGenericClientConstructor(UnimplementedScsService.definition, "Scs", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        Get(message: _GetRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_GetResponse>): grpc_1.ClientUnaryCall;
        Get(message: _GetRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_GetResponse>): grpc_1.ClientUnaryCall;
        Get(message: _GetRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_GetResponse>): grpc_1.ClientUnaryCall;
        Get(message: _GetRequest, callback: grpc_1.requestCallback<_GetResponse>): grpc_1.ClientUnaryCall;
        Get(message: _GetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_GetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_GetResponse>, callback?: grpc_1.requestCallback<_GetResponse>): grpc_1.ClientUnaryCall {
            return super.Get(message, metadata, options, callback);
        }
        Set(message: _SetRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_SetResponse>): grpc_1.ClientUnaryCall;
        Set(message: _SetRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_SetResponse>): grpc_1.ClientUnaryCall;
        Set(message: _SetRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_SetResponse>): grpc_1.ClientUnaryCall;
        Set(message: _SetRequest, callback: grpc_1.requestCallback<_SetResponse>): grpc_1.ClientUnaryCall;
        Set(message: _SetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_SetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_SetResponse>, callback?: grpc_1.requestCallback<_SetResponse>): grpc_1.ClientUnaryCall {
            return super.Set(message, metadata, options, callback);
        }
        Delete(message: _DeleteRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_DeleteResponse>): grpc_1.ClientUnaryCall;
        Delete(message: _DeleteRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_DeleteResponse>): grpc_1.ClientUnaryCall;
        Delete(message: _DeleteRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_DeleteResponse>): grpc_1.ClientUnaryCall;
        Delete(message: _DeleteRequest, callback: grpc_1.requestCallback<_DeleteResponse>): grpc_1.ClientUnaryCall;
        Delete(message: _DeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_DeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_DeleteResponse>, callback?: grpc_1.requestCallback<_DeleteResponse>): grpc_1.ClientUnaryCall {
            return super.Delete(message, metadata, options, callback);
        }
    }
}
