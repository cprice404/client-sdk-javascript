"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache_client = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.18.1
 * source: cacheclient.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
var cache_client;
(function (cache_client) {
    let ECacheResult;
    (function (ECacheResult) {
        ECacheResult[ECacheResult["Invalid"] = 0] = "Invalid";
        ECacheResult[ECacheResult["Ok"] = 1] = "Ok";
        ECacheResult[ECacheResult["Hit"] = 2] = "Hit";
        ECacheResult[ECacheResult["Miss"] = 3] = "Miss";
    })(ECacheResult = cache_client.ECacheResult || (cache_client.ECacheResult = {}));
    class _GetRequest extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_key" in data && data.cache_key != undefined) {
                    this.cache_key = data.cache_key;
                }
            }
        }
        get cache_key() {
            return pb_1.Message.getField(this, 1);
        }
        set cache_key(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _GetRequest({});
            if (data.cache_key != null) {
                message.cache_key = data.cache_key;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.cache_key != null) {
                data.cache_key = this.cache_key;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_key !== undefined)
                writer.writeBytes(1, this.cache_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _GetRequest.deserialize(bytes);
        }
    }
    cache_client._GetRequest = _GetRequest;
    class _GetResponse extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("cache_body" in data && data.cache_body != undefined) {
                    this.cache_body = data.cache_body;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get result() {
            return pb_1.Message.getField(this, 1);
        }
        set result(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get cache_body() {
            return pb_1.Message.getField(this, 2);
        }
        set cache_body(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getField(this, 3);
        }
        set message(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new _GetResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.cache_body != null) {
                message.cache_body = data.cache_body;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.cache_body != null) {
                data.cache_body = this.cache_body;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result !== undefined)
                writer.writeEnum(1, this.result);
            if (this.cache_body !== undefined)
                writer.writeBytes(2, this.cache_body);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _GetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readEnum();
                        break;
                    case 2:
                        message.cache_body = reader.readBytes();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _GetResponse.deserialize(bytes);
        }
    }
    cache_client._GetResponse = _GetResponse;
    class _DeleteRequest extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_key" in data && data.cache_key != undefined) {
                    this.cache_key = data.cache_key;
                }
            }
        }
        get cache_key() {
            return pb_1.Message.getField(this, 1);
        }
        set cache_key(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _DeleteRequest({});
            if (data.cache_key != null) {
                message.cache_key = data.cache_key;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.cache_key != null) {
                data.cache_key = this.cache_key;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_key !== undefined)
                writer.writeBytes(1, this.cache_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _DeleteRequest.deserialize(bytes);
        }
    }
    cache_client._DeleteRequest = _DeleteRequest;
    class _DeleteResponse extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _DeleteResponse({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _DeleteResponse.deserialize(bytes);
        }
    }
    cache_client._DeleteResponse = _DeleteResponse;
    class _SetRequest extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_key" in data && data.cache_key != undefined) {
                    this.cache_key = data.cache_key;
                }
                if ("cache_body" in data && data.cache_body != undefined) {
                    this.cache_body = data.cache_body;
                }
                if ("ttl_milliseconds" in data && data.ttl_milliseconds != undefined) {
                    this.ttl_milliseconds = data.ttl_milliseconds;
                }
            }
        }
        get cache_key() {
            return pb_1.Message.getField(this, 1);
        }
        set cache_key(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get cache_body() {
            return pb_1.Message.getField(this, 2);
        }
        set cache_body(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get ttl_milliseconds() {
            return pb_1.Message.getField(this, 3);
        }
        set ttl_milliseconds(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new _SetRequest({});
            if (data.cache_key != null) {
                message.cache_key = data.cache_key;
            }
            if (data.cache_body != null) {
                message.cache_body = data.cache_body;
            }
            if (data.ttl_milliseconds != null) {
                message.ttl_milliseconds = data.ttl_milliseconds;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.cache_key != null) {
                data.cache_key = this.cache_key;
            }
            if (this.cache_body != null) {
                data.cache_body = this.cache_body;
            }
            if (this.ttl_milliseconds != null) {
                data.ttl_milliseconds = this.ttl_milliseconds;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_key !== undefined)
                writer.writeBytes(1, this.cache_key);
            if (this.cache_body !== undefined)
                writer.writeBytes(2, this.cache_body);
            if (this.ttl_milliseconds !== undefined)
                writer.writeUint64(3, this.ttl_milliseconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_key = reader.readBytes();
                        break;
                    case 2:
                        message.cache_body = reader.readBytes();
                        break;
                    case 3:
                        message.ttl_milliseconds = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SetRequest.deserialize(bytes);
        }
    }
    cache_client._SetRequest = _SetRequest;
    class _SetResponse extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get result() {
            return pb_1.Message.getField(this, 1);
        }
        set result(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getField(this, 2);
        }
        set message(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new _SetResponse({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result !== undefined)
                writer.writeEnum(1, this.result);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readEnum();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SetResponse.deserialize(bytes);
        }
    }
    cache_client._SetResponse = _SetResponse;
    class UnimplementedScsService {
    }
    UnimplementedScsService.definition = {
        Get: {
            path: "/cache_client.Scs/Get",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _GetRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _GetResponse.deserialize(new Uint8Array(bytes))
        },
        Set: {
            path: "/cache_client.Scs/Set",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _SetRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _SetResponse.deserialize(new Uint8Array(bytes))
        },
        Delete: {
            path: "/cache_client.Scs/Delete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _DeleteRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _DeleteResponse.deserialize(new Uint8Array(bytes))
        }
    };
    cache_client.UnimplementedScsService = UnimplementedScsService;
    class ScsClient extends grpc_1.makeGenericClientConstructor(UnimplementedScsService.definition, "Scs", {}) {
        constructor(address, credentials, options) {
            super(address, credentials, options);
        }
        Get(message, metadata, options, callback) {
            return super.Get(message, metadata, options, callback);
        }
        Set(message, metadata, options, callback) {
            return super.Set(message, metadata, options, callback);
        }
        Delete(message, metadata, options, callback) {
            return super.Delete(message, metadata, options, callback);
        }
    }
    cache_client.ScsClient = ScsClient;
})(cache_client = exports.cache_client || (exports.cache_client = {}));
