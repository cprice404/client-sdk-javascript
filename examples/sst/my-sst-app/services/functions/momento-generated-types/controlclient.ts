/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.18.1
 * source: controlclient.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace control_client {
    export class _DeleteCacheRequest extends pb_1.Message {
        constructor(data?: any[] | {
            cache_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_name" in data && data.cache_name != undefined) {
                    this.cache_name = data.cache_name;
                }
            }
        }
        get cache_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set cache_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            cache_name?: string;
        }) {
            const message = new _DeleteCacheRequest({});
            if (data.cache_name != null) {
                message.cache_name = data.cache_name;
            }
            return message;
        }
        toObject() {
            const data: {
                cache_name?: string;
            } = {};
            if (this.cache_name != null) {
                data.cache_name = this.cache_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.cache_name === "string" && this.cache_name.length)
                writer.writeString(1, this.cache_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _DeleteCacheRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteCacheRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _DeleteCacheRequest {
            return _DeleteCacheRequest.deserialize(bytes);
        }
    }
    export class _DeleteCacheResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new _DeleteCacheResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _DeleteCacheResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteCacheResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _DeleteCacheResponse {
            return _DeleteCacheResponse.deserialize(bytes);
        }
    }
    export class _CreateCacheRequest extends pb_1.Message {
        constructor(data?: any[] | {
            cache_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_name" in data && data.cache_name != undefined) {
                    this.cache_name = data.cache_name;
                }
            }
        }
        get cache_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set cache_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            cache_name?: string;
        }) {
            const message = new _CreateCacheRequest({});
            if (data.cache_name != null) {
                message.cache_name = data.cache_name;
            }
            return message;
        }
        toObject() {
            const data: {
                cache_name?: string;
            } = {};
            if (this.cache_name != null) {
                data.cache_name = this.cache_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.cache_name === "string" && this.cache_name.length)
                writer.writeString(1, this.cache_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _CreateCacheRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CreateCacheRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _CreateCacheRequest {
            return _CreateCacheRequest.deserialize(bytes);
        }
    }
    export class _CreateCacheResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new _CreateCacheResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _CreateCacheResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CreateCacheResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _CreateCacheResponse {
            return _CreateCacheResponse.deserialize(bytes);
        }
    }
    export class _ListCachesRequest extends pb_1.Message {
        constructor(data?: any[] | {
            next_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("next_token" in data && data.next_token != undefined) {
                    this.next_token = data.next_token;
                }
            }
        }
        get next_token() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set next_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            next_token?: string;
        }) {
            const message = new _ListCachesRequest({});
            if (data.next_token != null) {
                message.next_token = data.next_token;
            }
            return message;
        }
        toObject() {
            const data: {
                next_token?: string;
            } = {};
            if (this.next_token != null) {
                data.next_token = this.next_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.next_token === "string" && this.next_token.length)
                writer.writeString(1, this.next_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _ListCachesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListCachesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.next_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _ListCachesRequest {
            return _ListCachesRequest.deserialize(bytes);
        }
    }
    export class _Cache extends pb_1.Message {
        constructor(data?: any[] | {
            cache_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_name" in data && data.cache_name != undefined) {
                    this.cache_name = data.cache_name;
                }
            }
        }
        get cache_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set cache_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            cache_name?: string;
        }) {
            const message = new _Cache({});
            if (data.cache_name != null) {
                message.cache_name = data.cache_name;
            }
            return message;
        }
        toObject() {
            const data: {
                cache_name?: string;
            } = {};
            if (this.cache_name != null) {
                data.cache_name = this.cache_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.cache_name === "string" && this.cache_name.length)
                writer.writeString(1, this.cache_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _Cache {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Cache();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _Cache {
            return _Cache.deserialize(bytes);
        }
    }
    export class _ListCachesResponse extends pb_1.Message {
        constructor(data?: any[] | {
            cache?: _Cache[];
            next_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache" in data && data.cache != undefined) {
                    this.cache = data.cache;
                }
                if ("next_token" in data && data.next_token != undefined) {
                    this.next_token = data.next_token;
                }
            }
        }
        get cache() {
            return pb_1.Message.getRepeatedWrapperField(this, _Cache, 1) as _Cache[];
        }
        set cache(value: _Cache[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_token() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set next_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            cache?: ReturnType<typeof _Cache.prototype.toObject>[];
            next_token?: string;
        }) {
            const message = new _ListCachesResponse({});
            if (data.cache != null) {
                message.cache = data.cache.map(item => _Cache.fromObject(item));
            }
            if (data.next_token != null) {
                message.next_token = data.next_token;
            }
            return message;
        }
        toObject() {
            const data: {
                cache?: ReturnType<typeof _Cache.prototype.toObject>[];
                next_token?: string;
            } = {};
            if (this.cache != null) {
                data.cache = this.cache.map((item: _Cache) => item.toObject());
            }
            if (this.next_token != null) {
                data.next_token = this.next_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache !== undefined)
                writer.writeRepeatedMessage(1, this.cache, (item: _Cache) => item.serialize(writer));
            if (typeof this.next_token === "string" && this.next_token.length)
                writer.writeString(2, this.next_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _ListCachesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListCachesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cache, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _Cache.deserialize(reader), _Cache));
                        break;
                    case 2:
                        message.next_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _ListCachesResponse {
            return _ListCachesResponse.deserialize(bytes);
        }
    }
    export class _CreateSigningKeyRequest extends pb_1.Message {
        constructor(data?: any[] | {
            ttl_minutes?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ttl_minutes" in data && data.ttl_minutes != undefined) {
                    this.ttl_minutes = data.ttl_minutes;
                }
            }
        }
        get ttl_minutes() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set ttl_minutes(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ttl_minutes?: number;
        }) {
            const message = new _CreateSigningKeyRequest({});
            if (data.ttl_minutes != null) {
                message.ttl_minutes = data.ttl_minutes;
            }
            return message;
        }
        toObject() {
            const data: {
                ttl_minutes?: number;
            } = {};
            if (this.ttl_minutes != null) {
                data.ttl_minutes = this.ttl_minutes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ttl_minutes !== undefined)
                writer.writeUint32(1, this.ttl_minutes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _CreateSigningKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CreateSigningKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ttl_minutes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _CreateSigningKeyRequest {
            return _CreateSigningKeyRequest.deserialize(bytes);
        }
    }
    export class _CreateSigningKeyResponse extends pb_1.Message {
        constructor(data?: any[] | {
            key?: string;
            expires_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("expires_at" in data && data.expires_at != undefined) {
                    this.expires_at = data.expires_at;
                }
            }
        }
        get key() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get expires_at() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set expires_at(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            expires_at?: number;
        }) {
            const message = new _CreateSigningKeyResponse({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.expires_at != null) {
                message.expires_at = data.expires_at;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                expires_at?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.expires_at != null) {
                data.expires_at = this.expires_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.key === "string" && this.key.length)
                writer.writeString(1, this.key);
            if (this.expires_at !== undefined)
                writer.writeUint64(2, this.expires_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _CreateSigningKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CreateSigningKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.expires_at = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _CreateSigningKeyResponse {
            return _CreateSigningKeyResponse.deserialize(bytes);
        }
    }
    export class _RevokeSigningKeyRequest extends pb_1.Message {
        constructor(data?: any[] | {
            key_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
            }
        }
        get key_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set key_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key_id?: string;
        }) {
            const message = new _RevokeSigningKeyRequest({});
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            return message;
        }
        toObject() {
            const data: {
                key_id?: string;
            } = {};
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.key_id === "string" && this.key_id.length)
                writer.writeString(1, this.key_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _RevokeSigningKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _RevokeSigningKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _RevokeSigningKeyRequest {
            return _RevokeSigningKeyRequest.deserialize(bytes);
        }
    }
    export class _RevokeSigningKeyResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new _RevokeSigningKeyResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _RevokeSigningKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _RevokeSigningKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _RevokeSigningKeyResponse {
            return _RevokeSigningKeyResponse.deserialize(bytes);
        }
    }
    export class _SigningKey extends pb_1.Message {
        constructor(data?: any[] | {
            key_id?: string;
            expires_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
                if ("expires_at" in data && data.expires_at != undefined) {
                    this.expires_at = data.expires_at;
                }
            }
        }
        get key_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set key_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get expires_at() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set expires_at(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key_id?: string;
            expires_at?: number;
        }) {
            const message = new _SigningKey({});
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            if (data.expires_at != null) {
                message.expires_at = data.expires_at;
            }
            return message;
        }
        toObject() {
            const data: {
                key_id?: string;
                expires_at?: number;
            } = {};
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            if (this.expires_at != null) {
                data.expires_at = this.expires_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.key_id === "string" && this.key_id.length)
                writer.writeString(1, this.key_id);
            if (this.expires_at !== undefined)
                writer.writeUint64(2, this.expires_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _SigningKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SigningKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_id = reader.readString();
                        break;
                    case 2:
                        message.expires_at = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _SigningKey {
            return _SigningKey.deserialize(bytes);
        }
    }
    export class _ListSigningKeysRequest extends pb_1.Message {
        constructor(data?: any[] | {
            next_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("next_token" in data && data.next_token != undefined) {
                    this.next_token = data.next_token;
                }
            }
        }
        get next_token() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set next_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            next_token?: string;
        }) {
            const message = new _ListSigningKeysRequest({});
            if (data.next_token != null) {
                message.next_token = data.next_token;
            }
            return message;
        }
        toObject() {
            const data: {
                next_token?: string;
            } = {};
            if (this.next_token != null) {
                data.next_token = this.next_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.next_token === "string" && this.next_token.length)
                writer.writeString(1, this.next_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _ListSigningKeysRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListSigningKeysRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.next_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _ListSigningKeysRequest {
            return _ListSigningKeysRequest.deserialize(bytes);
        }
    }
    export class _ListSigningKeysResponse extends pb_1.Message {
        constructor(data?: any[] | {
            signing_key?: _SigningKey[];
            next_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_key" in data && data.signing_key != undefined) {
                    this.signing_key = data.signing_key;
                }
                if ("next_token" in data && data.next_token != undefined) {
                    this.next_token = data.next_token;
                }
            }
        }
        get signing_key() {
            return pb_1.Message.getRepeatedWrapperField(this, _SigningKey, 1) as _SigningKey[];
        }
        set signing_key(value: _SigningKey[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_token() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set next_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            signing_key?: ReturnType<typeof _SigningKey.prototype.toObject>[];
            next_token?: string;
        }) {
            const message = new _ListSigningKeysResponse({});
            if (data.signing_key != null) {
                message.signing_key = data.signing_key.map(item => _SigningKey.fromObject(item));
            }
            if (data.next_token != null) {
                message.next_token = data.next_token;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_key?: ReturnType<typeof _SigningKey.prototype.toObject>[];
                next_token?: string;
            } = {};
            if (this.signing_key != null) {
                data.signing_key = this.signing_key.map((item: _SigningKey) => item.toObject());
            }
            if (this.next_token != null) {
                data.next_token = this.next_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_key !== undefined)
                writer.writeRepeatedMessage(1, this.signing_key, (item: _SigningKey) => item.serialize(writer));
            if (typeof this.next_token === "string" && this.next_token.length)
                writer.writeString(2, this.next_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): _ListSigningKeysResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListSigningKeysResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signing_key, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _SigningKey.deserialize(reader), _SigningKey));
                        break;
                    case 2:
                        message.next_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): _ListSigningKeysResponse {
            return _ListSigningKeysResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedScsControlService {
        static definition = {
            CreateCache: {
                path: "/control_client.ScsControl/CreateCache",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _CreateCacheRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _CreateCacheRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _CreateCacheResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _CreateCacheResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteCache: {
                path: "/control_client.ScsControl/DeleteCache",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _DeleteCacheRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _DeleteCacheRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _DeleteCacheResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _DeleteCacheResponse.deserialize(new Uint8Array(bytes))
            },
            ListCaches: {
                path: "/control_client.ScsControl/ListCaches",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _ListCachesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _ListCachesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _ListCachesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _ListCachesResponse.deserialize(new Uint8Array(bytes))
            },
            CreateSigningKey: {
                path: "/control_client.ScsControl/CreateSigningKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _CreateSigningKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _CreateSigningKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _CreateSigningKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _CreateSigningKeyResponse.deserialize(new Uint8Array(bytes))
            },
            RevokeSigningKey: {
                path: "/control_client.ScsControl/RevokeSigningKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _RevokeSigningKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _RevokeSigningKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _RevokeSigningKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _RevokeSigningKeyResponse.deserialize(new Uint8Array(bytes))
            },
            ListSigningKeys: {
                path: "/control_client.ScsControl/ListSigningKeys",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: _ListSigningKeysRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => _ListSigningKeysRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: _ListSigningKeysResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => _ListSigningKeysResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateCache(call: grpc_1.ServerUnaryCall<_CreateCacheRequest, _CreateCacheResponse>, callback: grpc_1.requestCallback<_CreateCacheResponse>): void;
        abstract DeleteCache(call: grpc_1.ServerUnaryCall<_DeleteCacheRequest, _DeleteCacheResponse>, callback: grpc_1.requestCallback<_DeleteCacheResponse>): void;
        abstract ListCaches(call: grpc_1.ServerUnaryCall<_ListCachesRequest, _ListCachesResponse>, callback: grpc_1.requestCallback<_ListCachesResponse>): void;
        abstract CreateSigningKey(call: grpc_1.ServerUnaryCall<_CreateSigningKeyRequest, _CreateSigningKeyResponse>, callback: grpc_1.requestCallback<_CreateSigningKeyResponse>): void;
        abstract RevokeSigningKey(call: grpc_1.ServerUnaryCall<_RevokeSigningKeyRequest, _RevokeSigningKeyResponse>, callback: grpc_1.requestCallback<_RevokeSigningKeyResponse>): void;
        abstract ListSigningKeys(call: grpc_1.ServerUnaryCall<_ListSigningKeysRequest, _ListSigningKeysResponse>, callback: grpc_1.requestCallback<_ListSigningKeysResponse>): void;
    }
    export class ScsControlClient extends grpc_1.makeGenericClientConstructor(UnimplementedScsControlService.definition, "ScsControl", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        CreateCache(message: _CreateCacheRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_CreateCacheResponse>): grpc_1.ClientUnaryCall;
        CreateCache(message: _CreateCacheRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_CreateCacheResponse>): grpc_1.ClientUnaryCall;
        CreateCache(message: _CreateCacheRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_CreateCacheResponse>): grpc_1.ClientUnaryCall;
        CreateCache(message: _CreateCacheRequest, callback: grpc_1.requestCallback<_CreateCacheResponse>): grpc_1.ClientUnaryCall;
        CreateCache(message: _CreateCacheRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_CreateCacheResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_CreateCacheResponse>, callback?: grpc_1.requestCallback<_CreateCacheResponse>): grpc_1.ClientUnaryCall {
            return super.CreateCache(message, metadata, options, callback);
        }
        DeleteCache(message: _DeleteCacheRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_DeleteCacheResponse>): grpc_1.ClientUnaryCall;
        DeleteCache(message: _DeleteCacheRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_DeleteCacheResponse>): grpc_1.ClientUnaryCall;
        DeleteCache(message: _DeleteCacheRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_DeleteCacheResponse>): grpc_1.ClientUnaryCall;
        DeleteCache(message: _DeleteCacheRequest, callback: grpc_1.requestCallback<_DeleteCacheResponse>): grpc_1.ClientUnaryCall;
        DeleteCache(message: _DeleteCacheRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_DeleteCacheResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_DeleteCacheResponse>, callback?: grpc_1.requestCallback<_DeleteCacheResponse>): grpc_1.ClientUnaryCall {
            return super.DeleteCache(message, metadata, options, callback);
        }
        ListCaches(message: _ListCachesRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_ListCachesResponse>): grpc_1.ClientUnaryCall;
        ListCaches(message: _ListCachesRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_ListCachesResponse>): grpc_1.ClientUnaryCall;
        ListCaches(message: _ListCachesRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_ListCachesResponse>): grpc_1.ClientUnaryCall;
        ListCaches(message: _ListCachesRequest, callback: grpc_1.requestCallback<_ListCachesResponse>): grpc_1.ClientUnaryCall;
        ListCaches(message: _ListCachesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_ListCachesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_ListCachesResponse>, callback?: grpc_1.requestCallback<_ListCachesResponse>): grpc_1.ClientUnaryCall {
            return super.ListCaches(message, metadata, options, callback);
        }
        CreateSigningKey(message: _CreateSigningKeyRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_CreateSigningKeyResponse>): grpc_1.ClientUnaryCall;
        CreateSigningKey(message: _CreateSigningKeyRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_CreateSigningKeyResponse>): grpc_1.ClientUnaryCall;
        CreateSigningKey(message: _CreateSigningKeyRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_CreateSigningKeyResponse>): grpc_1.ClientUnaryCall;
        CreateSigningKey(message: _CreateSigningKeyRequest, callback: grpc_1.requestCallback<_CreateSigningKeyResponse>): grpc_1.ClientUnaryCall;
        CreateSigningKey(message: _CreateSigningKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_CreateSigningKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_CreateSigningKeyResponse>, callback?: grpc_1.requestCallback<_CreateSigningKeyResponse>): grpc_1.ClientUnaryCall {
            return super.CreateSigningKey(message, metadata, options, callback);
        }
        RevokeSigningKey(message: _RevokeSigningKeyRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_RevokeSigningKeyResponse>): grpc_1.ClientUnaryCall;
        RevokeSigningKey(message: _RevokeSigningKeyRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_RevokeSigningKeyResponse>): grpc_1.ClientUnaryCall;
        RevokeSigningKey(message: _RevokeSigningKeyRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_RevokeSigningKeyResponse>): grpc_1.ClientUnaryCall;
        RevokeSigningKey(message: _RevokeSigningKeyRequest, callback: grpc_1.requestCallback<_RevokeSigningKeyResponse>): grpc_1.ClientUnaryCall;
        RevokeSigningKey(message: _RevokeSigningKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_RevokeSigningKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_RevokeSigningKeyResponse>, callback?: grpc_1.requestCallback<_RevokeSigningKeyResponse>): grpc_1.ClientUnaryCall {
            return super.RevokeSigningKey(message, metadata, options, callback);
        }
        ListSigningKeys(message: _ListSigningKeysRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_ListSigningKeysResponse>): grpc_1.ClientUnaryCall;
        ListSigningKeys(message: _ListSigningKeysRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<_ListSigningKeysResponse>): grpc_1.ClientUnaryCall;
        ListSigningKeys(message: _ListSigningKeysRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<_ListSigningKeysResponse>): grpc_1.ClientUnaryCall;
        ListSigningKeys(message: _ListSigningKeysRequest, callback: grpc_1.requestCallback<_ListSigningKeysResponse>): grpc_1.ClientUnaryCall;
        ListSigningKeys(message: _ListSigningKeysRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<_ListSigningKeysResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<_ListSigningKeysResponse>, callback?: grpc_1.requestCallback<_ListSigningKeysResponse>): grpc_1.ClientUnaryCall {
            return super.ListSigningKeys(message, metadata, options, callback);
        }
    }
}
